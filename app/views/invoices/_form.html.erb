
<div class="container-fluid">
  <div class="row">
    <div class="col-xs-12 col-md-9">
      <h1>INVOICE</h1>
      <h6><%= Date.today.to_s %></h6>
    </div>
    <div class="col-xs-12 col-md-3 pull-md-right">
      <div class="freelancer-info text-center">
        <p><strong><%= current_user.freelancer.company_name %></strong></p>
        <p><%= current_user.freelancer.first_name %> <%= current_user.freelancer.last_name %></p>
        <p class="freelancer-info-email"> <%= current_user.email %> </p>
      </div>
    </div>
  </div>

  <%= simple_form_for @invoice, :html => { :class => 'invoice-form', :data => {:'parsley-validate' => ''} } do |f| %>
  <%= f.error_notification %>

  <%= simple_fields_for :client do |c| %>
  <%= c.error_notification %>
  <div class="client-info">
    <h4>Client info:</h4>

    <div class="row">
      <div class="col-xs-12 col-md-5">
       <%= c.input :first_name, label: 'Client first name', :input_html => {:data => { :'parsley-error-message' => "First Name is required please!", :'parsley-group' => "block1" } }  %>
     </div>
     <div class="col-xs-12 col-md-5">
      <%= c.input :last_name, label: 'Client last name', :input_html => {:data => { :'parsley-error-message' => "Last Name is required please!", :'parsley-group' => "block1" } } %>
    </div>
  </div>

  <%= c.input :company, :input_html => {:data => { :'parsley-error-message' => "Company is required please!" } } %>

  <%= c.input :company_number  %>

  <%= c.input :email, label: 'Client email', placeholder: 'user@domain.com', :html => { :id => 'invoice-email' } %>

</div>
<% end %>

<hr>

<h4>Description:</h4>

<div id="descriptions">
  <%= f.simple_fields_for :descriptions do |description| %>
  <%= description.error_notification %>
  <%= render 'description_fields', f: description %>
  <% end %>

  <div class="links">
    <div class="plus-button">
      <%= link_to_add_association f, :descriptions do %>
      <span class="glyphicon glyphicon-plus desc-button" aria-hidden="true" id='add-description'></span>
      <% end %>
    </div>
  </div>
</div>

<div class="total-fields">
  <div class="row">
    <div class="col-xs-4 col-md-3">
    </div>
    <div class="col-xs-4 col-md-3 pull-right">
      <div><label>Subtotal</label></div>
      <input type="text" id="subtotal" disabled="disabled">
      <div><label>TOTAL</label></div>
      <input type="text" id="total" disabled="disabled">
    </div>
  </div>
</div>

<hr>

<div class="invoice-info">
  <h4>Invoice info:</h4>

  <%= f.input :invoice_nr, label: 'Invoice number' %>
  <div class='row datetimerange'>
    <div class="col-xs-6">
      <%= f.input :invoice_date, as: :date_picker, input_html: {data: {date_options: {defaultDate: Date.today.year.to_s+'/'+Date.today.month.to_s+'/'+Date.today.day.to_s}}} %>
    </div>
    <div class="col-xs-6">
      <%= f.input :due_date, as: :date_picker %>
    </div>
  </div>
  <%= f.input :invoice_terms, label: 'Invoice Terms' %>
</div>
<!-- Warning ! if you change Edit email & send OR Save from below make sure to impact changes in the invoices_controller  -->
<%= f.button :submit, value: "Edit email & Send", :class => 'btn-invoice' %>
<%= f.button :submit, value: "Save", :class => 'btn-invoice' %>
<% end %>

</div>
<!--
<%# content_for(:after_js) do %>
<script type="text/javascript">
  $(document).ready(function() {
    $('.invoice-form').parsley().on('field:validate', function (formInstance) {
var ok = formInstance.isValid({group: 'block1', force: true}) || formInstance.isValid({group: 'block2', force: true});
      $('.invalid-form-error-message')
      .html(ok ? '' : 'You must correctly fill *at least one of these two blocks!')
      .toggleClass('filled', !ok);

      if (!ok){
        formInstance.validationResult = false;
      };

      // Date calendars
      $('.datetimepicker').datetimepicker({
        showTodayButton: true,
        showClear: true,
        showClose: true,
      });
    });

  </script>
  <%# end %>


-->

<% content_for(:after_js) do %>
<script>
  $(function(){

    var calculateAmount = function(descriptionId){
      $('#invoice_descriptions_attributes_'+ descriptionId +'_amount').val(unit*price)
    }

    var unit = 1, price = 0, vat = 20, descriptionIndex = 0, amount = 0;

    var attachCalculator = function(descriptionIndex){
      // giving unit 1
      $('#invoice_descriptions_attributes_' + descriptionIndex + '_unit').val(unit);
      // giving price 0 as default;
      $('#invoice_descriptions_attributes_' + descriptionIndex + '_price').val(price);
      // giving VAT tax 20% by default
      $('#invoice_descriptions_attributes_' + descriptionIndex + '_vat_tax').val(vat);
      // givint amount 0 by default
      $('#invoice_descriptions_attributes_' + descriptionIndex + '_amount').val(amount);
      //
      calculateAmount();
      // disabling amount to be edited
      $('#invoice_descriptions_attributes_' + descriptionIndex + '_amount').attr("disabled", "disabled");

      $('#invoice_descriptions_attributes_' + descriptionIndex + '_unit').change(function(){

        unit = $(this).val();
        calculateAmount(descriptionIndex);
        totalCalculatorWriter(totalCalculator());

      });
      $('#invoice_descriptions_attributes_' + descriptionIndex + '_price').keyup(function(){
       price =$(this).val();
       calculateAmount(descriptionIndex);
       totalCalculatorWriter(totalCalculator());
       // repeating the process for new descriptions
       // First listening to the click of adding a description
     });
    };


    attachCalculator(descriptionIndex);
    // -------------- event handler for additional decriptions ---------------

    $('#descriptions > div.links').on('DOMNodeInserted', function(e){
      var descriptionId = $('.links .nested-fields').last().find('label').first().attr('for').match(/\d+/)[0];

      attachCalculator(descriptionId);
    });



// ------------ GETTING TOTAL amounts and all _________
var totalCalculator = function(){
  var total = 0, i = 0 , limit = $("[name$='amount]']").length ;
  var totalht = 0;
  var amounts = $("[name$='[amount]']");
  var vats = $("[name$='vat_tax]']");


  for(i; i < limit; i++ ){
    var currentAmounts = parseInt($(amounts[i]).val());
    var currentVat = parseInt($(vats[i]).val());

    total = total + currentAmounts +
    ( currentAmounts * currentVat / 100 );

    totalht = totalht + currentAmounts ;
  };
  return ({total: total, totalht: totalht});
};

var totalCalculatorWriter = function(totals){
  $('#subtotal').val(totals.totalht);
  console.log(totals.totalht)
  $('#total').val(totals.total);
};

$('#descriptions').on('DOMNodeRemoved', function(e){
  var totals = totalCalculator();

  var deleted_total = parseInt($(e.target).find("[name$='amount]']")[0].value) ;
  var vat = parseInt($(e.target).find("[name$='vat_tax]']")[0].value) ;
  totals.totalht = totals.totalht - deleted_total;
  totals.total = totals.total - (deleted_total + deleted_total * vat / 100);

  totalCalculatorWriter(totals);
// appeller ma fonction pour ecrire mon total
});

});



</script>
<% end %>